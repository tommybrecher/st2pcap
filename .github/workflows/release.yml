name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        run: |
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/st2pcap-${{ matrix.goos }}-${{ matrix.goarch }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: st2pcap-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/st2pcap-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: build

      - name: Ensure full git history
        run: |
          git fetch --prune --unshallow || true
          git fetch --tags

      - run: |
          nextVersion="$(gh release view --json name --jq '.name' | cut -d ' ' -f2 | awk -F. -v OFS=. '{$NF += 1 ; print}')"
          echo 'NEXT_VERSION='$nextVersion >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          gh release create "v${NEXT_VERSION}" -t "Release ${NEXT_VERSION}" -n "Release ${NEXT_VERSION}" --generate-notes --latest build/**/st2pcap-*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # - name: Create release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: build/**/st2pcap-*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
